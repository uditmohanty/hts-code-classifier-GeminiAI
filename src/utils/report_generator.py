import json
from datetime import datetime
from fpdf import FPDF
import io

class ReportGenerator:
    
    def generate_json_report(self, result: dict, product_info: dict) -> str:
        """Generate JSON report"""
        report = {
            "report_metadata": {
                "report_id": f"HS-{datetime.now().strftime('%Y%m%d-%H%M%S')}",
                "generated_at": datetime.now().isoformat(),
                "generated_by": "HS Code Classifier AI v1.0"
            },
            "product_information": product_info,
            "classification_result": {
                "recommended_code": result.get('recommended_code'),
                "duty_rate": result.get('duty_rate'),
                "confidence_score": result.get('confidence'),
                "reasoning_summary": result.get('reasoning'),
                "alternatives": result.get('alternatives', [])
            },
            "compliance_references": {
                "hts_candidates": result.get('hts_candidates', []),
                "cross_rulings_used": result.get('cross_rulings', []),
                "notes": "Final classification subject to confirmation by U.S. Customs & Border Protection (CBP)."
            },
            "disclaimer": "This report is generated by an AI-powered tool for informational purposes only. Importers remain responsible for compliance with U.S. Customs regulations."
        }
        
        return json.dumps(report, indent=2)
    
    def generate_pdf_report(self, result: dict, product_info: dict) -> bytes:
        """Generate PDF report"""
        pdf = FPDF()
        pdf.add_page()
        
        # Header
        pdf.set_font('Arial', 'B', 16)
        pdf.cell(0, 10, 'HS CODE CLASSIFICATION REPORT', 0, 1, 'C')
        
        pdf.set_font('Arial', '', 10)
        pdf.cell(0, 5, f"Generated: {datetime.now().strftime('%B %d, %Y at %I:%M %p')}", 0, 1, 'C')
        pdf.cell(0, 5, f"Report ID: HS-{datetime.now().strftime('%Y%m%d-%H%M%S')}", 0, 1, 'C')
        pdf.ln(10)
        
        # Product Information
        pdf.set_font('Arial', 'B', 14)
        pdf.cell(0, 10, 'Product Information', 0, 1)
        pdf.set_font('Arial', '', 11)
        
        for key, value in product_info.items():
            if value:
                pdf.cell(0, 6, f"{key.replace('_', ' ').title()}: {value}", 0, 1)
        
        pdf.ln(5)
        
        # Classification Result
        pdf.set_font('Arial', 'B', 14)
        pdf.cell(0, 10, 'Classification Result', 0, 1)
        pdf.set_font('Arial', '', 11)
        
        pdf.set_font('Arial', 'B', 12)
        pdf.cell(0, 8, f"Recommended HS Code: {result.get('recommended_code', 'N/A')}", 0, 1)
        pdf.set_font('Arial', '', 11)
        
        pdf.cell(0, 6, f"Duty Rate: {result.get('duty_rate', 'N/A')}", 0, 1)
        pdf.cell(0, 6, f"Confidence Score: {result.get('confidence', 'N/A')}", 0, 1)
        pdf.ln(3)
        
        # Reasoning
        pdf.set_font('Arial', 'B', 11)
        pdf.cell(0, 6, 'Reasoning:', 0, 1)
        pdf.set_font('Arial', '', 10)
        pdf.multi_cell(0, 5, result.get('reasoning', 'No reasoning provided'))
        pdf.ln(3)
        
        # Alternatives
        if result.get('alternatives'):
            pdf.set_font('Arial', 'B', 11)
            pdf.cell(0, 6, 'Alternative Codes:', 0, 1)
            pdf.set_font('Arial', '', 10)
            for alt in result['alternatives']:
                pdf.cell(0, 5, f"  - {alt}", 0, 1)
        
        pdf.ln(5)
        
        # Disclaimer
        pdf.set_font('Arial', 'I', 9)
        pdf.multi_cell(0, 4, "DISCLAIMER: This report is generated by an AI-powered tool for informational purposes only. Importers remain responsible for compliance with U.S. Customs & Border Protection (CBP) regulations. Final classification should be confirmed with CBP or a licensed customs broker.")
        
        # Output as bytes - modern fpdf2 returns bytes directly
        return bytes(pdf.output())

class PDFReport(FPDF):
    """Custom PDF class with header/footer"""
    
    def header(self):
        self.set_font('Arial', 'B', 12)
        self.cell(0, 10, 'HS Code Classification Report', 0, 1, 'C')
        self.ln(5)
    
    def footer(self):
        self.set_y(-15)
        self.set_font('Arial', 'I', 8)
        self.cell(0, 10, f'Page {self.page_no()}', 0, 0, 'C')